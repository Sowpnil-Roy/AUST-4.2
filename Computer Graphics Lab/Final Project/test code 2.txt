import * as THREE from 'https://cdn.skypack.dev/three@0.132.2/build/three.module.js';
import { OrbitControls } from 'https://cdn.skypack.dev/three@0.132.2/examples/jsm/controls/OrbitControls.js';

let scene, camera, renderer, controls;
const castleMaterial = new THREE.MeshStandardMaterial({ color: 'coral' });
const wallMaterial = new THREE.MeshStandardMaterial({ color: 'tan' });

init();
animate();

function init() {
    // Scene
    scene = new THREE.Scene();

    // Camera
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 50, 150);

    // Renderer
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Controls
    controls = new OrbitControls(camera, renderer.domElement);
    controls.enablePan = false;

    // Lighting
    const ambientLight = new THREE.AmbientLight(0x404040);
    scene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(50, 50, 50);
    scene.add(directionalLight);

    // Ground
    const groundTexture = new THREE.TextureLoader().load('https://threejs.org/examples/textures/grasslight-small.jpg');
    const groundMaterial = new THREE.MeshStandardMaterial({ map: groundTexture });
    const groundGeometry = new THREE.PlaneGeometry(200, 200);
    const ground = new THREE.Mesh(groundGeometry, groundMaterial);
    ground.rotation.x = -Math.PI / 2;
    scene.add(ground);

    // Main building
    const mainBuildingGeometry = new THREE.BoxGeometry(40, 20, 30);
    const mainBuilding = new THREE.Mesh(mainBuildingGeometry, castleMaterial);
    mainBuilding.position.set(0, 10, 0);
    scene.add(mainBuilding);

    // Towers with conical roofs
    createTowerWithRoof(-25, 10, -15);
    createTowerWithRoof(25, 10, -15);
    createTowerWithRoof(-25, 10, 15);
    createTowerWithRoof(25, 10, 15);

    // Walls
    createWall(wallMaterial, -12.5, 5, -15, 25, 10, 1);
    createWall(wallMaterial, 12.5, 5, -15, 25, 10, 1);
    createWall(wallMaterial, -25, 5, 0, 1, 10, 30);
    createWall(wallMaterial, 25, 5, 0, 1, 10, 30);
    createWall(wallMaterial, -12.5, 5, 15, 25, 10, 1);
    createWall(wallMaterial, 12.5, 5, 15, 25, 10, 1);

    // Create a courtyard
    createCourtyard();

    // Add flags to the towers
    createFlags();

    // Add arched windows to main building
    createArchedWindows(mainBuilding);

    // Add battlements to main building and walls
    createBattlements(mainBuilding, 20, 30, 4, 2);
    createBattlementsToWalls(-12.5, 5, -15, 25, 10, 1);
    createBattlementsToWalls(12.5, 5, -15, 25, 10, 1);
    createBattlementsToWalls(-12.5, 5, 15, 25, 10, 1);
    createBattlementsToWalls(12.5, 5, 15, 25, 10, 1);

    // Event listeners
    window.addEventListener('resize', onWindowResize, false);
}

function createTowerWithRoof(x, y, z) {
    const towerGeometry = new THREE.CylinderGeometry(5, 5, 20, 32);
    const tower = new THREE.Mesh(towerGeometry, castleMaterial);
    tower.position.set(x, y, z);
    scene.add(tower);

    // Create a conical roof
    const roofGeometry = new THREE.ConeGeometry(6, 10, 32);
    const roofMaterial = new THREE.MeshStandardMaterial({ color: 'darkred' });
    const roof = new THREE.Mesh(roofGeometry, roofMaterial);
    roof.position.set(x, y + 15, z);
    roof.rotation.y = Math.PI / 2; // Align the roof
    scene.add(roof);
}

function createWall(material, x, y, z, width, height, depth) {
    const wallGeometry = new THREE.BoxGeometry(width, height, depth);
    const wall = new THREE.Mesh(wallGeometry, material);
    wall.position.set(x, y, z);
    scene.add(wall);
}

function createCourtyard() {
    const courtyardMaterial = new THREE.MeshStandardMaterial({ color: 'lightgray' });
    const courtyardGeometry = new THREE.PlaneGeometry(80, 80);
    const courtyard = new THREE.Mesh(courtyardGeometry, courtyardMaterial);
    courtyard.rotation.x = -Math.PI / 2; // Lay it flat
    courtyard.position.set(0, 0.1, 0); // Slight elevation
    scene.add(courtyard);
}

function createFlags() {
    const flagMaterial = new THREE.MeshStandardMaterial({ color: 'blue' });
    const flagGeometry = new THREE.PlaneGeometry(1, 1.5);
    const flagPoleGeometry = new THREE.CylinderGeometry(0.1, 0.1, 5);
    
    const flagPositions = [
        { x: -25, y: 25, z: -15 },
        { x: 25, y: 25, z: -15 },
        { x: -25, y: 25, z: 15 },
        { x: 25, y: 25, z: 15 }
    ];

    flagPositions.forEach(pos => {
        const flagPole = new THREE.Mesh(flagPoleGeometry, castleMaterial);
        flagPole.position.set(pos.x, pos.y, pos.z);
        scene.add(flagPole);

        const flag = new THREE.Mesh(flagGeometry, flagMaterial);
        flag.position.set(pos.x, pos.y + 3, pos.z);
        flag.rotation.y = Math.PI / 2; // Face the flag forward
        scene.add(flag);
    });
}

function createArchedWindows(building) {
    const windowMaterial = new THREE.MeshStandardMaterial({ color: 'lightblue' });
    const windowGeometry = new THREE.CylinderGeometry(2.5, 2.5, 5, 32, 1, false);

    const positions = [
        { x: -10, y: 10, z: 15 },
        { x: -10, y: 10, z: -15 },
        { x: 10, y: 10, z: 15 },
        { x: 10, y: 10, z: -15 }
    ];

    positions.forEach(pos => {
        const window = new THREE.Mesh(windowGeometry, windowMaterial);
        window.position.set(pos.x, pos.y, pos.z);
        window.rotation.z = Math.PI / 2; // Set the window upright
        building.add(window);
    });
}

function createBattlements(base, baseWidth, baseDepth, width, height) {
    const battlementGeometry = new THREE.BoxGeometry(width, height, baseDepth);
    for (let i = -baseWidth / 2 + width / 2; i < baseWidth / 2; i += width * 2) {
        const battlement = new THREE.Mesh(battlementGeometry, castleMaterial);
        battlement.position.set(i, base.geometry.parameters.height / 2 + height / 2, 0);
        base.add(battlement);
    }
}

function createBattlementsToWalls(x, y, z, width, height, depth) {
    const battlementGeometry = new THREE.BoxGeometry(width, height, depth);
    for (let i = -depth / 2; i < depth / 2; i += width * 2) {
        const battlement = new THREE.Mesh(battlementGeometry, castleMaterial);
        battlement.position.set(x, y + height / 2, z + i);
        scene.add(battlement);
    }
}

function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}

function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}
